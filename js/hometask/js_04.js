// # Module 2 - Lesson 4 - Functions

// ## ******************** Example 1 - Body mass index ********************
// Write a function `calcBMI(weight, height)` that calculates and returns the body mass
// index of a person. To do this, divide the weight in kilograms by
// square of a person's height in meters.
// The weight and height will be specially passed as strings. Non-integer numbers can be
// specified as `24.7` or `24.7`, i.e. a comma can be used
// as a decimal separator.
// Body mass index must be rounded to one decimal place;

// const bmi = calcBMI('88,3', '1.75');
// console.log(bmi); // 28.8

// -----------------------------------------------------------------------------

// ## ******************** Example 2 - Smaller of numbers ********************

// Write a function `min(a,b)` that returns the smaller of the numbers `a` and `b`.

// console.log(min(2, 5)); // 2
// console.log(min(3, -1)); // -1
// console.log(min(1, 1)); // 1

// -----------------------------------------------------------------------------

// ## ******************** Example 3 - Area of a rectangle ********************

// Write a function `getRectArea(dimensions)` to calculate the area of a rectangle
// with sides, the values of which will be passed to the `dimensions` parameter as a string.
// Values are guaranteed to be separated by a space.

// function getRectArea(dimensions) {}

// console.log(getRectArea('8 11'));

// -----------------------------------------------------------------------------

// ## ******************** Example 4 - Element logging ********************

// Write a function `logItems(items)` that takes an array and uses a `for` loop
// that for each element of the array will print a message to the console in
// format`<item number> - <item value>`.The numbering of elements should start with `1`.
// For example, for the first element of the array `['Mango', 'Poly', 'Ajax']` with index `0`
// will print `1 - Mango` and for index 2 will print `3 - Ajax`.

// function logItems(items) {}

// logItems(['Mango', 'Poly', 'Ajax']);
// logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);

// -----------------------------------------------------------------------------

// ## ******************** Example 5 - Contact logging ********************

// Write a function `printContactsInfo(names, phones)` that prints  to the console the name
// and the user's phone number. The `names` and `phones` parameters will be passed
// strings of names and phone numbers separated by commas. Sequence number of names and
// phone numbers in the rows indicate a match. Number of names and phones
// guaranteed to be the same.

// function printContactsInfo(names, phones) {}

// printContactsInfo(
//   'Jacob,William,Solomon,Artemis',
//   '89001234567,89001112233,890055566377,890055566300',
// );

// -----------------------------------------------------------------------------

// ## ******************** Example 6 - Finding the largest element ********************

// Write a function `findLargestNumber(numbers)` that looks for the largest number in array.

// function findLargestNumber(numbers) {}

// console.log(findLargestNumber([2, 17, 94, 1, 23, 37])); // 94
// console.log(findLargestNumber([49, 4, 7, 83, 12])); // 83

// -----------------------------------------------------------------------------

// ## ******************** Example 7 - Average value ********************

// Write a `calAverage()` function that takes an arbitrary number of arguments
// and returns their average. All arguments will be only numbers.

// function calAverage() {}

// console.log(calAverage(1, 2, 3, 4)); // 2.5
// console.log(calAverage(14, 8, 2)); // 8
// console.log(calAverage(27, 43, 2, 8, 36)); // 23.2

// -----------------------------------------------------------------------------

// ## ******************** Example 8 - Time Formatting ********************

// Write a function `formatTime(minutes)` that will translate the value of `minutes`
// (number of minutes) to a string in hour and minute format `HH:MM`.

// const hours = Math.floor(totalMinutes / 60);
// const minutes = totalMinutes % 60;
// console.log(hours);
// console.log(minutes);

// const doubleDigitHours = String(hours).padStart(2, 0);
// const doubleDigitMinutes = String(minutes).padStart(2, 0);
// console.log(`${doubleDigitHours}:${doubleDigitMinutes}`);

// function formatTime(minutes) {}

// console.log(formatTime(70)); // "01:10"
// console.log(formatTime(450)); // "07:30"
// console.log(formatTime(1441)); // "24:01"

// -----------------------------------------------------------------------------

// ## ******************** Example 9 - Collection of courses (includes, indexOf, push, etc.) ********************

// Write functions to work with the `courses` collection of training courses:
// - `addCourse(name)` - adds a course to the end of the collection
// - `removeCourse(name)` - removes a course from the collection
// - `updateCourse(oldName, newName)` - changes the name to a new one

// const courses = ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL'];

// addCourse('Express');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL', 'Express']
// addCourse('CSS'); // ' You already have this course'

// removeCourse('React');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'Express']
// removeCourse('Vue'); // 'Course with this name was not found'

// updateCourse('Express', 'NestJS');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'NestJS']

// -----------------------------------------------------------------------------

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

// console.log('Lesson 4');
// // # –ú–æ–¥—É–ª—å 2. –ó–∞–Ω—è—Ç—Ç—è 4. –§—É–Ω–∫—Ü—ñ—ó

// // ## Example 1 - –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞

// // –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é `calcBMI(weight, height)` —è–∫–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î
// // —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –ª—é–¥–∏–Ω–∏. –î–ª—è —Ü—å–æ–≥–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –≤–∞–≥—É –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö –Ω–∞
// // –∫–≤–∞–¥—Ä–∞—Ç –≤–∏—Å–æ—Ç–∏ –ª—é–¥–∏–Ω–∏ –≤ –º–µ—Ç—Ä–∞—Ö.

// // –í–∞–≥–∞ —Ç–∞ –≤–∏—Å–æ—Ç–∞ –±—É–¥—É—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ —è–∫ —Ä—è–¥–∫–∏. –ù–µ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞–¥–∞–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ
// // `24.7` –∞–±–æ `24,7`, —Ç–æ–±—Ç–æ —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –¥—Ä–æ–±–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏
// // –º–æ–∂–µ –±—É—Ç–∏ –∫–æ–º–∞.

// // –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç–∏ –¥–æ –æ–¥–Ω—ñ—î—ó —Ü–∏—Ñ—Ä–∏ –ø—ñ—Å–ª—è –∫–æ–º–∏;

// // ```js

// /**
//  * 1. –∑–∞–ø–∏—Ç–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –π–æ–≥–æ –∑—Ä—ñ—Å—Ç —ñ –≤–∞–≥—É
//  * 2. –Ω–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–≤–∞ –∞—Ä—É–≥–º–µ–Ω—Ç–∏ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞
//  */

// const calcBMI = function(w, h) {
//   const weight = Number(w.replace(',', '.'));
//   const height = Number(h.replace(',', '.'));

//   const heightPow = Math.pow(height, 2);

//   return weight / heightPow
// }

// // const weight = prompt('–≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –≤–∞–≥—É –≤ –∫—ñ–ª–≥—Ä–∞–º–∞—Ö');
// // const height = prompt('–≤–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –∑—Ä—ñ—Å—Ç –≤ –º–µ—Ç—Ä–∞—Ö');

// // const bmi = calcBMI(weight, height);
// // console.log(bmi); // 28.8
// // ```

// // ## Example 2 - –ù–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª

// // –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é `min(a,b)`, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª `a` —Ç–∞ `b`.

// // ```js

// const min = function (a, b) {
//   return a > b ? b : a;
// }

// console.log(min(2, 5)); // 2
// console.log(min(3, -1)); // -1
// console.log(min(1, 1)); // 1
// console.log(min(4, 4)); // 1
// // ```

// // ## Example 3 - –ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞

// // –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é `getRectArea(dimensions)` –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
// // –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `dimensions` —É –≤–∏–≥–ª—è–¥—ñ
// // —Ä—è–¥–∫–∞. –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.

// // ```js
// // console.log("square = ", getRectArea('8 11'));

// function getRectArea(dimensions) {
//   const sizesArr = dimensions.split(' ');

//   return sizesArr[0] * sizesArr[1]
// }

// // ```

// // ## Example 4 - –õ–æ–≥—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤

// // –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é `logItems(items)`, —è–∫–∞ –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–∏–∫–ª
// // `for`, —è–∫–∏–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –±—É–¥–µ –≤–∏–≤–æ–¥–∏—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É
// // —Ñ–æ—Ä–º–∞—Ç—ñ `<–Ω–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞> - <–∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞>`. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞
// // –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ `1`.

// // –ù–∞–ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É `['Mango', 'Poly', 'Ajax']` –∑ —ñ–Ω–¥–µ–∫—Å–æ–º `0`
// // –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ `1 - Mango`, –∞ –¥–ª—è —ñ–Ω–¥–µ–∫—Å—É 2 –≤–∏–≤–µ–¥–µ `3 - Ajax`.

// // ```js
// function logItems(items) {
//   // for (let i = 0; i < items.length; i += 1) {
//   //   console.log(`${i + 1} - ${items[i]}`)
//   // }

//   for (let item of items) {
//     const i = items.indexOf(item)
//     console.log(`${i + 1} - ${item}`)
//   }

// }

// // logItems(['Mango', 'Poly', 'Ajax']);
// // logItems(['asdas', 'asdasd', 'dkjghk']);
// // logItems(['Mango', 'Poly', 'Ajax']);
// // logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);
// // ```

// // ## Example 5 - –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤

// // –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é `printContactsInfo(names, phones)` —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è
// // —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ `names` —Ç–∞ `phones` –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ
// // —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞
// // —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
// // –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.

// // ```js
// function printContactsInfo(names, phones) {
//   const namesArray = names.split(',');
//   const phonesArray = phones.split(',');

//   const result = [];
//   // 1
//   for (let i = 0; i < namesArray.length; i += 1) {
//     result.push(`${namesArray[i]} - ${phonesArray[i]}`)
//   }

//   // // 2
//   // for (let item of namesArray) {
//   //   const i = namesArray.indexOf(item);
//   //   console.log(`${namesArray[i]} - ${phonesArray[i]}`)
//   // }

//   return result.sort()
// }

// // printContactsInfo(
// //   'Jacob,William,Solomon,Artemis',
// //   '89001234567,89001112233,890055566377,890055566300',
// // );

// // const array = printContactsInfo(
// //   'Artem,Ivan,Petro,Semen',
// //   '89001112233,890055566377,890055566300',
// // );

// // console.log(array.join(' || '))
// // ```

// // ## Example 6 - –ü–æ—à—É–∫ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞

// // –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é `findLargestNumber(numbers)`—è–∫–∞ —à—É–∫–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ –≤
// // –º–∞—Å–∏–≤—ñ.

// // ```js
// function findLargestNumber(numbers) {
//   //1
//   return Math.max(...numbers)

//   //2
//   // let max = numbers[0];
//   // for (let element of numbers) {
//   //   if (element > max) {
//   //     max = element
//   //   }
//   // }

//   // return max
// }

// console.log(findLargestNumber([2, 17, 94, 1, 23, 37])); // 94
// console.log(findLargestNumber([49, 4, 7, 83, 12])); // 83
// // ```

// // ## Example 7 - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è

// // –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é `calAverage()` —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
// // —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö–Ω—î —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è. –£—Å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –±—É–¥—É—Ç—å –ª–∏—à–µ —á–∏—Å–ª–∞–º–∏.

// // ```js
// function calcAverage(...numbers) {

//   // console.log(numbers)

//   // console.log("Total arguments = ", arguments.length);

//   let sum = 0;
//   for (let arg of numbers) {
//     sum += arg
//   }

//   // return sum / arguments.length
// }

// // console.log(calcAverage(1, 2, 3, 4, 45, 12, 67)); // 2.5
// // console.log(calAverage(14, 8, 2)); // 8
// // console.log(calAverage(27, 43, 2, 8, 36)); // 23.2
// // ```

// // ## Example 8 - –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É

// // –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é `formatTime(minutes)` —è–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è `minutes`
// // (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω) —É —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –≥–æ–¥–∏–Ω —Ç–∞ —Ö–≤–∏–ª–∏–Ω `HH:MM`.

// // ```js
// // const hours = Math.floor(totalMinutes / 60);
// // const minutes = totalMinutes % 60;
// // console.log(hours);
// // console.log(minutes);

// // const doubleDigitHours = String(hours).padStart(2, 0);
// // const doubleDigitMinutes = String(minutes).padStart(2, 0);
// // console.log(`${doubleDigitHours}:${doubleDigitMinutes}`);

// function formatTime(minutes) {
//   const hours = Math.floor(minutes / 60);
//   const mins = minutes % 60;

//   const formatedHours = String(hours).padStart(2, '0')
//   const formatedMinutes = String(mins).padStart(2, '0')

//   return `${formatedHours}:${formatedMinutes}`
// }

// const a = formatTime(1440);
// console.log(a); // "01:10"
// // console.log(formatTime(450)); // "07:30"
// // console.log(formatTime(1441)); // "24:01"
// // ```

// // ## Example 9 - –ö–æ–ª–µ–∫—Ü—ñ—è –∫—É—Ä—Å—ñ–≤ (includes, indexOf, push —ñ —Ç. –¥.)

// // –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ `courses`:

// // - `addCourse(name)` - –¥–æ–¥–∞—î –∫—É—Ä—Å –¥–æ –∫—ñ–Ω—Ü—è –∫–æ–ª–µ–∫—Ü—ñ—ó
// // - `removeCourse(name)` - –≤–∏–¥–∞–ª—è—î –∫—É—Ä—Å —ñ–∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
// // - `updateCourse(oldName, newName)` - –∑–º—ñ–Ω—é—î —ñ–º'—è –Ω–∞ –Ω–æ–≤–µ

// // ```js
// const courses = ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL'];

// const lastCourseIndex = courses.length - 1;
// const lastCourse = courses[lastCourseIndex];

// function A (array) {
//   console.log(array)

// }

// A([1,2,3,4])

// function addCourse(name) {
//   // if (courses.includes(name)) {
//   //   return '–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Ç–∞–∫–∏–π –∫—É—Ä—Å'
//   // }

//   if (courses.indexOf(name) > -1) {
//     return '–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Ç–∞–∫–∏–π –∫—É—Ä—Å'
//   }

//   courses.push(name);
//   return '–ö—É—Ä—Å –¥–æ–¥–∞–Ω–æ'
// }

// function deleteCourse(name = 'deafult value') {
//   /**
//    * 1. –ó–Ω–∞–π—Ç–∏ —ñ–Ω–¥–µ–∫—Å –µ–ª–µ–º–µ–Ω—Ç–∞. indexOF
//    * 2. –í–∏–¥–∞–ª—è—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –ø–æ —ñ–Ω–¥–µ–∫—Å—É. splice
//    */

//   const index = courses.indexOf(name);
//   if (index === -1) {
//     return '–¢–∞–∫–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ–º–∞'
//   }

//   const result = `–ö—É—Ä—Å ${courses[index]} –≤–∏–¥–∞–ª–µ–Ω–æ`
//   courses.splice(index, 1);

//   return result
// }

// function updateCourse (oldName, newName) {

//   const index = courses.indexOf(oldName);
//   if (index === -1) {
//     return '–¢–∞–∫–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ–º–∞'
//   }

//   const result = `–ö—É—Ä—Å ${oldName} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –∫—É—Ä—Å ${newName}`
//   courses.splice(index, 1, newName);

//   return result
// }
// const arr = [8,9,10];
// arr.sort();
// console.log()

// let res = addCourse('Express');
// console.log(courses, res); // ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL', 'Express']

// res = addCourse('Express');
// console.log(courses, res); // ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL', 'Express']
// // addCourse('CSS'); // '–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Ç–∞–∫–∏–π –∫—É—Ä—Å'

// res = deleteCourse();
// console.log(courses, res); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'Express']
// // removeCourse('Vue'); // '–ö—É—Ä—Å —ñ–∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'

// res = updateCourse('Expressss', 'NestJS');
// console.log(courses, res); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'NestJS']
// // ```
